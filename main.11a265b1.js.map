{"version":3,"sources":["scripts/main.js"],"names":["page","document","documentElement","score","querySelector","best","info","startBtn","startMassage","winMessage","loseMessage","cells","querySelectorAll","scoreValue","bestValue","movingValuePossition","newValuePlace","canMove","fieldLength","values","valuesTocells","row","column","canWeMove","hasEmptyCell","some","includes","isRowWithSameValue","isColumnWithSameValue","addElement","randomNum","Math","random","random2VS4","randomRow","round","randomColumn","i","textContent","classList","add","remove","delayedAddElement","window","setTimeout","addModifier","modifier","removeModifier","allModifier","contains","push","map","updateCurCell","word","adding","updatePrevCell","moveUp","length","prevRow","moveDown","nextRow","moveRight","prevColumn","moveLeft","nextColumn","addEventListener","forEach","cell","e","preventDefault","key"],"mappings":"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","file":"main.11a265b1.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// window variables:\nconst page = document.documentElement;\nconst score = document.querySelector('.game_score');\nconst best = document.querySelector('.game_best');\nconst info = document.querySelector('.info');\nconst startBtn = document.querySelector('.button, .start');\nconst startMassage = document.querySelector('.message_start');\nconst winMessage = document.querySelector('.message_win');\nconst loseMessage = document.querySelector('.message_lose');\nconst cells = document.querySelectorAll('.field_cell');\n\n// JS variables:\nlet scoreValue = 0;\nlet bestValue = 0;\nlet movingValuePossition = null;\nlet newValuePlace = null;\nlet canMove = null;\nconst fieldLength = 3;\n\nlet values = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\n// compile values to cells.\nfunction valuesTocells(row, column = 0) {\n  return cells[(row) * 4 + column];\n}\n\nfunction canWeMove() {\n  const hasEmptyCell = values.some(row => row.includes(0));\n  let isRowWithSameValue = null;\n  let isColumnWithSameValue = null;\n\n  for (let row = 1; row <= fieldLength; row++) {\n    for (let column = 0; column <= fieldLength; column++) {\n      if (values[row][column] === values[row - 1][column]) {\n        isRowWithSameValue = true;\n      }\n    }\n  }\n\n  for (let row = 0; row <= fieldLength; row++) {\n    for (let column = 1; column <= fieldLength; column++) {\n      if (values[row][column] === values[row][column - 1]) {\n        isColumnWithSameValue = true;\n      }\n    }\n  }\n\n  return (hasEmptyCell\n    || isRowWithSameValue || isColumnWithSameValue);\n}\n\nfunction addElement() {\n  if (canWeMove()) {\n    let randomNum = Math.random();\n    let random2VS4 = null;\n    let randomRow = Math.round(Math.random() * (3 - 0) + 0);\n    let randomColumn = Math.round(Math.random() * (3 - 0) + 0);\n\n    for (let i = 0; i <= 100; i++) {\n      if (values[randomRow][randomColumn] === 0) {\n        if (randomNum > 0.1) {\n          random2VS4 = 2;\n        } else {\n          random2VS4 = 4;\n        }\n        values[randomRow][randomColumn] = random2VS4;\n        valuesTocells(randomRow, randomColumn).textContent = random2VS4;\n\n        valuesTocells(randomRow, randomColumn)\n          .classList.add(`field_cell--${random2VS4}`);\n        break;\n      } else {\n        randomNum = Math.random();\n        randomRow = Math.round(Math.random() * (3 - 0) + 0);\n        randomColumn = Math.round(Math.random() * (3 - 0) + 0);\n        continue;\n      }\n    }\n  }\n\n  if (!canWeMove()) {\n    return loseMessage.classList.remove('hidden');\n  }\n\n  canMove = null;\n}\n\nfunction delayedAddElement() {\n  window.setTimeout(addElement, 200);\n  canMove = null;\n}\n\n// addind new modifier to cell.\nfunction addModifier(row, column) {\n  if (values[row][column] > 0) {\n    for (let modifier = 2; modifier <= 2048; modifier *= 2) {\n      if (modifier === values[row][column]) {\n        valuesTocells(row, column)\n          .classList.add(`field_cell--${modifier}`);\n        break;\n      }\n    }\n  }\n\n  return cells;\n}\n\n// remove modifier from cell.\nfunction removeModifier(row, column) {\n  if (values[row][column] > 0) {\n    const allModifier = [];\n\n    for (let modifier = 2; modifier <= 2048; modifier *= 2) {\n      if (valuesTocells(row, column).classList\n        .contains(`field_cell--${modifier}`)) {\n        allModifier.push(`field_cell--${modifier}`);\n      }\n    }\n\n    allModifier.map(modifier => valuesTocells(row, column)\n      .classList.remove(modifier));\n  }\n\n  return cells;\n}\n\n// set new value, modifier for current cell position.\nfunction updateCurCell(word, row, column, adding) {\n  if (adding) {\n    values[row][column] = movingValuePossition + adding;\n    scoreValue += values[row][column];\n    score.textContent = scoreValue;\n\n    if (bestValue < scoreValue) {\n      bestValue = scoreValue;\n    }\n    best.textContent = bestValue;\n\n    if (values[row][column] >= 2048) {\n      winMessage.classList.remove('hidden');\n    }\n  } else {\n    values[row][column] = movingValuePossition;\n  }\n\n  if (word === 'r') {\n    valuesTocells(row, column).textContent = values[newValuePlace][column];\n    addModifier((row), column);\n  } else {\n    valuesTocells(row, column).textContent = values[row][newValuePlace];\n    addModifier((row), column);\n  }\n}\n\n// remove value, modifier from old cell position.\nfunction updatePrevCell(row, column) {\n  removeModifier(row, column);\n  values[row][column] = 0;\n  valuesTocells(row, column).textContent = '';\n}\n\nfunction moveUp() {\n  for (let row = 0; row < values.length; row++) {\n    for (let column = 0; column < values[row].length; column++) {\n      if (values[row][column] !== 0 && row !== 0) {\n        movingValuePossition = values[row][column];\n\n        for (let prevRow = row - 1; prevRow >= 0;) {\n          if (values[prevRow][column] === 0) {\n            if (prevRow !== 0) {\n              prevRow--;\n              continue;\n            } else {\n              newValuePlace = prevRow;\n              canMove = true;\n              updateCurCell('r', newValuePlace, column);\n              updatePrevCell(row, column);\n              break;\n            }\n          } else if (values[prevRow][column] === movingValuePossition) {\n            newValuePlace = prevRow;\n            canMove = true;\n            updateCurCell('r', newValuePlace, column, movingValuePossition);\n            updatePrevCell(row, column);\n            break;\n          } else if (values[prevRow][column] > 0) {\n            newValuePlace = prevRow + 1;\n\n            if (row - prevRow > 1) {\n              canMove = true;\n              updateCurCell('r', newValuePlace, column);\n              updatePrevCell(row, column);\n            }\n            updateCurCell('r', newValuePlace, column);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    delayedAddElement();\n  }\n}\n\nfunction moveDown() {\n  for (let row = values.length - 1; row >= 0; row--) {\n    for (let column = 0; column < values.length; column++) {\n      if (values[row][column] !== 0 && row !== 3) {\n        movingValuePossition = values[row][column];\n\n        for (let nextRow = row + 1; nextRow <= values.length;) {\n          if (values[nextRow][column] === 0) {\n            if (nextRow !== 3) {\n              nextRow++;\n              continue;\n            } else {\n              newValuePlace = nextRow;\n              canMove = true;\n              updateCurCell('r', newValuePlace, column);\n              updatePrevCell(row, column);\n              break;\n            }\n          } else if (values[nextRow][column] === movingValuePossition) {\n            newValuePlace = nextRow;\n            canMove = true;\n            updateCurCell('r', newValuePlace, column, movingValuePossition);\n            updatePrevCell(row, column);\n            break;\n          } else if (values[nextRow][column] > 0) {\n            newValuePlace = nextRow - 1;\n\n            if (nextRow - row > 1) {\n              canMove = true;\n              updateCurCell('r', newValuePlace, column);\n              updatePrevCell(row, column);\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    delayedAddElement();\n  }\n}\n\nfunction moveRight() {\n  for (let row = 0; row < values.length; row++) {\n    for (let column = values[row].length - 1; column >= 0; column--) {\n      if (values[row][column] !== 0 && column !== 3) {\n        movingValuePossition = values[row][column];\n\n        for (let prevColumn = column + 1; prevColumn <= 3;) {\n          if (values[row][prevColumn] === 0) {\n            if (prevColumn !== 3) {\n              prevColumn++;\n              continue;\n            } else {\n              newValuePlace = prevColumn;\n              canMove = true;\n              updateCurCell('c', row, newValuePlace);\n              updatePrevCell(row, column);\n              break;\n            }\n          } else if (values[row][prevColumn] === movingValuePossition) {\n            newValuePlace = prevColumn;\n            canMove = true;\n            updateCurCell('c', row, newValuePlace, movingValuePossition);\n            updatePrevCell(row, column);\n            break;\n          } else if (values[row][prevColumn] > 0) {\n            newValuePlace = prevColumn - 1;\n\n            if (prevColumn - column > 1) {\n              canMove = true;\n              updateCurCell('c', row, newValuePlace);\n              updatePrevCell(row, column);\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    delayedAddElement();\n  }\n}\n\nfunction moveLeft() {\n  for (let row = 0; row < values.length; row++) {\n    for (let column = 0; column < values[row].length; column++) {\n      if (values[row][column] !== 0 && column !== 0) {\n        movingValuePossition = values[row][column];\n\n        for (let nextColumn = column - 1; nextColumn >= 0;) {\n          if (values[row][nextColumn] === 0) {\n            if (nextColumn !== 0) {\n              nextColumn--;\n              continue;\n            } else {\n              newValuePlace = nextColumn;\n              canMove = true;\n              updateCurCell('c', row, newValuePlace);\n              updatePrevCell(row, column);\n              break;\n            }\n          } else if (values[row][nextColumn] === movingValuePossition) {\n            newValuePlace = nextColumn;\n            canMove = true;\n            updateCurCell('c', row, newValuePlace, movingValuePossition);\n            updatePrevCell(row, column);\n            break;\n          } else if (values[row][nextColumn] > 0) {\n            newValuePlace = nextColumn + 1;\n\n            if (column - nextColumn > 1) {\n              canMove = true;\n              updateCurCell('c', row, newValuePlace);\n              updatePrevCell(row, column);\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (canMove) {\n    delayedAddElement();\n  }\n}\n\n// duties of Start/Restart button.\nstartBtn.addEventListener('click', () => {\n  if (startBtn.classList.contains('start')) {\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n    startMassage.classList.add('hidden');\n    addElement();\n    addElement();\n    info.classList.add('active');\n  } else {\n    score.textContent = 0;\n    scoreValue = 0;\n    loseMessage.classList.add('hidden');\n\n    const allModifier = [];\n\n    for (let modifier = 2; modifier <= 2048; modifier *= 2) {\n      allModifier.push(`field_cell--${modifier}`);\n    }\n\n    cells.forEach(cell => {\n      cell.textContent = '';\n      allModifier.map(modifier => cell.classList.remove(modifier));\n\n      return cell;\n    });\n    values = values.map(row => row.map(() => 0));\n    addElement();\n    addElement();\n  }\n});\n\n// duties of arrows.\npage.addEventListener('keydown', function(e) {\n  e.preventDefault();\n\n  const key = e.key;\n\n  switch (true) {\n    case (key === 'ArrowUp'):\n      moveUp();\n      break;\n    case (key === 'ArrowDown'):\n      moveDown();\n      break;\n    case (key === 'ArrowRight'):\n      moveRight();\n      break;\n    case (key === 'ArrowLeft'):\n      moveLeft();\n      break;\n  }\n});\n"]}